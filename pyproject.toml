[project]
name = "mini-word-finder"
version = "1.0.0"
description = "A web app that generates mini word search puzzles"
requires-python = ">=3.11"
dependencies = [
    "flask>=2.3.0",
    "flask-login>=0.6.0",
    "flask-sqlalchemy>=3.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "psycopg2-binary>=2.9.0",
    "python-dotenv>=1.0.0",
    "werkzeug>=2.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "import-linter>=1.12.0",
    "types-Flask>=1.1.0",
    "types-psycopg2>=2.9.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by line-length
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_untyped_defs = true
warn_unused_ignores = true
ignore_missing_imports = true
strict_optional = true
warn_redundant_casts = true
warn_unused_configs = true
disallow_any_generics = true

# Allow untyped calls for third-party libraries
[[tool.mypy.overrides]]
module = [
    "flask.*",
    "sqlalchemy.*",
    "alembic.*",
    "psycopg2.*",
    "werkzeug.*",
    "pytest.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["app"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "-v",
]
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]